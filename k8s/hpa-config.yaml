# VAD服务水平自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vad-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vad-service
  minReplicas: 6
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ASR服务水平自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: asr-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: asr-service
  minReplicas: 8
  maxReplicas: 24
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Resource
    resource:
      name: nvidia.com/gpu
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120  # ASR扩容需要更长时间
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 600  # ASR缩容需要更保守
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120

---
# Redis服务配置
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-service
  labels:
    app: redis-service
spec:
  replicas: 3  # Redis集群模式
  selector:
    matchLabels:
      app: redis-service
  template:
    metadata:
      labels:
        app: redis-service
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --maxmemory
        - 2gb
        - --maxmemory-policy
        - allkeys-lru
        - --tcp-keepalive
        - "60"
        - --timeout
        - "300"
        - --tcp-backlog
        - "511"
        - --databases
        - "16"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis服务
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis-service
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# 性能监控配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
    - job_name: 'vad-service'
      static_configs:
      - targets: ['vad-service:8004']
      metrics_path: '/vad/stats'
      scrape_interval: 10s
    - job_name: 'asr-service'
      static_configs:
      - targets: ['asr-service:8001']
      metrics_path: '/asr/stats'
      scrape_interval: 10s
    - job_name: 'redis'
      static_configs:
      - targets: ['redis-service:6379']
      scrape_interval: 30s