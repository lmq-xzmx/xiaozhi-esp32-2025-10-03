# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage-pvc
  namespace: xiaozhi-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tts-cache-pvc
  namespace: xiaozhi-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
# Secrets for API Keys
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: xiaozhi-system
type: Opaque
data:
  qwen-api-key: eW91ci1xd2VuLWFwaS1rZXk=  # base64 encoded
  baichuan-api-key: eW91ci1iYWljaHVhbi1hcGkta2V5  # base64 encoded
  azure-speech-key: eW91ci1henVyZS1zcGVlY2gta2V5  # base64 encoded
---
# ConfigMap for Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: xiaozhi-system
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream vad_backend {
            least_conn;
            server vad-service:8000;
        }
        
        upstream asr_backend {
            least_conn;
            server asr-service:8001;
        }
        
        upstream llm_backend {
            least_conn;
            server llm-service:8002;
        }
        
        upstream tts_backend {
            least_conn;
            server tts-service:8003;
        }
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_conn_zone $binary_remote_addr zone=conn:10m;
        
        server {
            listen 80;
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # VAD API
            location /vad/ {
                limit_req zone=api burst=20 nodelay;
                limit_conn conn 10;
                proxy_pass http://vad_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_timeout 30s;
            }
            
            # ASR API
            location /asr/ {
                limit_req zone=api burst=15 nodelay;
                limit_conn conn 8;
                proxy_pass http://asr_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_timeout 60s;
                client_max_body_size 10M;
            }
            
            # LLM API
            location /llm/ {
                limit_req zone=api burst=10 nodelay;
                limit_conn conn 5;
                proxy_pass http://llm_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_timeout 120s;
            }
            
            # TTS API
            location /tts/ {
                limit_req zone=api burst=15 nodelay;
                limit_conn conn 8;
                proxy_pass http://tts_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_timeout 60s;
            }
            
            # WebSocket support
            location /ws {
                proxy_pass http://vad_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_read_timeout 86400;
            }
        }
    }
---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: xiaozhi-services
  namespace: xiaozhi-system
  labels:
    app: xiaozhi-services
spec:
  selector:
    matchLabels:
      component: ai-pipeline
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: xiaozhi-network-policy
  namespace: xiaozhi-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: xiaozhi-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from: []
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: xiaozhi-system
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80